{
	"info": {
		"_postman_id": "71c19419-2d87-4e25-bf26-60e7413a334e",
		"name": "moderation_enchansement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25795398"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(201); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"myemail@email.com\",\n    \"name\": \"Artem Pupkin\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(201); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"New Category\" \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/categories",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(201); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"New annotation for event test\",\n    \"category\": 1,\n    \"description\": \"New description for event test\",\n    \"eventDate\": \"2025-05-16 00:00:00\",\n    \"title\": \"New title for collection\",\n    \"location\": {\n        \"lat\": -65,\n        \"lon\": 65\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/:userId/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel event with comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(1).equal(body.comments.length)",
							"    pm.expect(\"This event needs moderation. Change title and description\").equal(body.comments[0])",
							"    pm.expect(\"CANCELED\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"This event needs moderation. Change title and description\",\n    \"stateAction\": \"REJECT_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get events check default param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json()[0];",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(1).equal(body.comments.length)",
							"    pm.expect(\"This event needs moderation. Change title and description\").equal(body.comments[0])",
							"    pm.expect(\"CANCELED\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get events with filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"В ответе не доллжно прийти событий\", function () {",
							"    pm.expect(0).equal(body.length)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events?onlyCorrected=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "onlyCorrected",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get event by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(1).equal(body.comments.length)",
							"    pm.expect(\"This event needs moderation. Change title and description\").equal(body.comments[0])",
							"    pm.expect(\"CANCELED\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update event by user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(\"PENDING\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"new annotation after first review\",\n    \"description\": \"new description after first review\",\n    \"stateAction\": \"SEND_TO_REVIEW\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get events with filter after updating",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json()[0];",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(1).equal(body.comments.length)",
							"    pm.expect(\"This event needs moderation. Change title and description\").equal(body.comments[0])",
							"    pm.expect(\"PENDING\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events?onlyCorrected=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events"
					],
					"query": [
						{
							"key": "onlyCorrected",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel event with comment x2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(2).equal(body.comments.length)",
							"    pm.expect(\"This event needs moderation AGAIN\").equal(body.comments[0])",
							"    pm.expect(\"This event needs moderation. Change title and description\").equal(body.comments[1])",
							"    pm.expect(\"CANCELED\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"This event needs moderation AGAIN\",\n    \"stateAction\": \"REJECT_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get event by user x2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(2).equal(body.comments.length)",
							"    pm.expect(\"This event needs moderation AGAIN\").equal(body.comments[0])",
							"    pm.expect(\"This event needs moderation. Change title and description\").equal(body.comments[1])",
							"    pm.expect(\"CANCELED\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update event by user x2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(\"PENDING\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"annotation\": \"new annotation after first review\",\n    \"description\": \"new description after first review\",\n    \"stateAction\": \"SEND_TO_REVIEW\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/1/events/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"1",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish user event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {",
							"    pm.expect(pm.response.code).to.equal(200); // код ответа должен быть равен 201 OK",
							"    pm.response.to.be.withBody; // ответ должен содержать тело",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON",
							"});",
							"",
							"const body = pm.response.json();",
							"",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration\", function () {",
							"pm.expect(body).to.have.property('id');",
							"pm.expect(body).to.have.property('title');",
							"pm.expect(body).to.have.property('annotation');",
							"pm.expect(body).to.have.property('category');",
							"pm.expect(body).to.have.property('paid');",
							"pm.expect(body).to.have.property('eventDate');",
							"pm.expect(body).to.have.property('initiator');",
							"pm.expect(body).to.have.property('description');",
							"pm.expect(body).to.have.property('participantLimit');",
							"pm.expect(body).to.have.property('state');",
							"pm.expect(body).to.have.property('createdOn');",
							"pm.expect(body).to.have.property('publishedOn');",
							"pm.expect(body).to.have.property('location');",
							"pm.expect(body).to.have.property('requestModeration');",
							"pm.expect(body).to.have.property('comments');",
							"});",
							"",
							"pm.test(\"В ответе должен содержаться добавленный комментарий\", function () {",
							"    pm.expect(0).equal(body.comments.length)",
							"    pm.expect(\"PUBLISHED\").equal(body.state);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stateAction\": \"PUBLISH_EVENT\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/:eventId",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}